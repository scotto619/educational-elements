import React, { useState } from 'react';
import { Plus, Trash2, Upload, Download, Wand2, RefreshCw, Save } from 'lucide-react';

const SpecialistTimetable = () => {
  // Generate default time periods for Monday-Friday
  const generateDefaultPeriods = () => {
    const periods = [];
    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
    let id = 1;
    
    days.forEach(day => {
      // 8:30am - 10:30am (4 blocks)
      const morning = [
        ['08:30', '09:00'],
        ['09:00', '09:30'],
        ['09:30', '10:00'],
        ['10:00', '10:30'],
      ];
      
      // Break 10:30am - 11:10am
      
      // 11:10am - 1:10pm (4 blocks)
      const midday = [
        ['11:10', '11:40'],
        ['11:40', '12:10'],
        ['12:10', '12:40'],
        ['12:40', '13:10'],
      ];
      
      // Break 1:10pm - 1:50pm
      
      // 1:50pm - 2:30pm (1 block of 40 min, but we'll use 30 min block)
      const afternoon = [
        ['13:50', '14:20'],
      ];
      
      [...morning, ...midday, ...afternoon].forEach(([start, end]) => {
        periods.push({ id: id++, start, end, day });
      });
    });
    
    return periods;
  };

  const [specialists, setSpecialists] = useState([
    { id: 1, name: 'Junior PE', duration: 60, color: '#3b82f6', yearLevels: ['Prep', 'Year 1', 'Year 2'] },
    { id: 2, name: 'Senior PE', duration: 60, color: '#3b82f6', yearLevels: ['Year 3', 'Year 4', 'Year 5', 'Year 6'] },
    { id: 3, name: 'Junior ART', duration: 60, color: '#8b5cf6', yearLevels: ['Prep', 'Year 1', 'Year 2'] },
    { id: 4, name: 'Senior ART', duration: 60, color: '#8b5cf6', yearLevels: ['Year 3', 'Year 4', 'Year 5', 'Year 6'] },
    { id: 5, name: 'Health', duration: 30, color: '#ec4899', yearLevels: [] },
    { id: 6, name: 'Music', duration: 30, color: '#f59e0b', yearLevels: [] },
    { id: 7, name: 'LOTE', duration: 30, color: '#ef4444', yearLevels: [] },
  ]);
  
  // Generate default classes: Prep to Year 6, 4 classes each
  const generateDefaultClasses = () => {
    const classes = [];
    const yearLevels = ['Prep', 'Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5', 'Year 6'];
    const classLetters = ['A', 'B', 'C', 'D'];
    let id = 1;
    
    yearLevels.forEach(year => {
      classLetters.forEach(letter => {
        classes.push({ id: id++, name: `${year}${letter}` });
      });
    });
    
    return classes;
  };
  
  const [classes, setClasses] = useState(generateDefaultClasses());
  
  const [timePeriods, setTimePeriods] = useState(generateDefaultPeriods());
  
  const [timetable, setTimetable] = useState({});
  const [breaks, setBreaks] = useState([
    { id: 1, name: 'Recess', start: '10:30', end: '11:10' },
    { id: 2, name: 'Lunch', start: '13:10', end: '13:50' }
  ]);
  const [constraints, setConstraints] = useState([
    { id: 1, yearLevel: 'Prep', type: 'avoid', startTime: '08:30', endTime: '10:30', day: 'all' },
    { id: 2, yearLevel: 'Year 1', type: 'avoid', startTime: '08:30', endTime: '10:30', day: 'all' },
    { id: 3, yearLevel: 'Year 2', type: 'avoid', startTime: '08:30', endTime: '10:30', day: 'all' },
    { id: 4, yearLevel: 'Year 3', type: 'minimize', startTime: '11:10', endTime: '13:10', day: 'all' },
    { id: 5, yearLevel: 'Year 4', type: 'minimize', startTime: '11:10', endTime: '13:10', day: 'all' },
    { id: 6, yearLevel: 'Year 5', type: 'minimize', startTime: '11:10', endTime: '13:10', day: 'all' },
    { id: 7, yearLevel: 'Year 6', type: 'minimize', startTime: '11:10', endTime: '13:10', day: 'all' },
  ]);
  const [newConstraint, setNewConstraint] = useState({ yearLevel: 'Prep', type: 'avoid', startTime: '', endTime: '', day: 'all' });
  const [view, setView] = useState('timetable');
  const [timetableView, setTimetableView] = useState('by-class');
  const [specialistOrientation, setSpecialistOrientation] = useState('horizontal');
  const [selectedClassId, setSelectedClassId] = useState(null);
  const [selectedSpecialistId, setSelectedSpecialistId] = useState(null);
  const [editingCell, setEditingCell] = useState(null);
  const [newSpecialist, setNewSpecialist] = useState({ name: '', duration: 30, color: '#3b82f6', yearLevels: [] });
  const [newClass, setNewClass] = useState('');
  const [newPeriod, setNewPeriod] = useState({ start: '', end: '', day: 'Monday' });
  const [newBreak, setNewBreak] = useState({ name: '', start: '', end: '' });
  const [generating, setGenerating] = useState(false);

  const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#ef4444', '#06b6d4', '#84cc16'];
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
  const availableYearLevels = ['Prep', 'Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5', 'Year 6'];

  const addSpecialist = () => {
    if (newSpecialist.name) {
      setSpecialists([...specialists, { ...newSpecialist, id: Date.now() }]);
      setNewSpecialist({ name: '', duration: 30, color: '#3b82f6', yearLevels: [] });
    }
  };

  const deleteSpecialist = (id) => {
    setSpecialists(specialists.filter(s => s.id !== id));
    const newTimetable = { ...timetable };
    Object.keys(newTimetable).forEach(key => {
      if (newTimetable[key].specialistId === id) {
        delete newTimetable[key];
      }
    });
    setTimetable(newTimetable);
  };

  const addClass = () => {
    if (newClass) {
      setClasses([...classes, { id: Date.now(), name: newClass }]);
      setNewClass('');
    }
  };

  const deleteClass = (id) => {
    setClasses(classes.filter(c => c.id !== id));
    const newTimetable = { ...timetable };
    Object.keys(newTimetable).forEach(key => {
      if (key.startsWith(`${id}-`)) {
        delete newTimetable[key];
      }
    });
    setTimetable(newTimetable);
  };

  const addBreak = () => {
    if (newBreak.name && newBreak.start && newBreak.end) {
      setBreaks([...breaks, { ...newBreak, id: Date.now() }]);
      setNewBreak({ name: '', start: '', end: '' });
    }
  };

  const deleteBreak = (id) => {
    setBreaks(breaks.filter(b => b.id !== id));
  };

  const isBreakTime = (period) => {
    return breaks.some(breakPeriod => {
      return period.start >= breakPeriod.start && period.start < breakPeriod.end;
    });
  };

  const addConstraint = () => {
    if (newConstraint.yearLevel && newConstraint.startTime && newConstraint.endTime) {
      setConstraints([...constraints, { ...newConstraint, id: Date.now() }]);
      setNewConstraint({ yearLevel: 'Prep', type: 'avoid', startTime: '', endTime: '', day: 'all' });
    }
  };

  const deleteConstraint = (id) => {
    setConstraints(constraints.filter(c => c.id !== id));
  };

  const isConstrainedTime = (period, className, type = 'avoid') => {
    const match = className.match(/^(Prep|Year \d+)/);
    const yearLevel = match ? match[1] : null;
    if (!yearLevel) return false;

    return constraints.some(constraint => {
      const dayMatches = constraint.day === 'all' || constraint.day === period.day;
      return (
        constraint.yearLevel === yearLevel &&
        constraint.type === type &&
        period.start >= constraint.startTime &&
        period.start < constraint.endTime &&
        dayMatches
      );
    });
  };

  const addPeriod = () => {
    if (newPeriod.start && newPeriod.end && newPeriod.day) {
      setTimePeriods([...timePeriods, { ...newPeriod, id: Date.now() }]);
      setNewPeriod({ start: '', end: '', day: 'Monday' });
    }
  };

  const deletePeriod = (id) => {
    setTimePeriods(timePeriods.filter(p => p.id !== id));
    const newTimetable = { ...timetable };
    Object.keys(newTimetable).forEach(key => {
      if (key.endsWith(`-${id}`)) {
        delete newTimetable[key];
      }
    });
    setTimetable(newTimetable);
  };

  const handleCellClick = (classId, periodId) => {
    const key = `${classId}-${periodId}`;
    if (timetable[key]) {
      setEditingCell({ classId, periodId, current: timetable[key] });
    } else {
      setEditingCell({ classId, periodId, current: null });
    }
  };

  const assignSpecialist = (specialistId) => {
    if (editingCell) {
      const key = `${editingCell.classId}-${editingCell.periodId}`;
      const newTimetable = { ...timetable };
      
      if (specialistId === null) {
        const existing = timetable[key];
        if (existing && existing.spanCount > 1) {
          const period = timePeriods.find(p => p.id === editingCell.periodId);
          if (period) {
            const dayPeriods = timePeriods
              .filter(p => p.day === period.day)
              .sort((a, b) => a.start.localeCompare(b.start));
            
            const periodIndex = dayPeriods.findIndex(p => p.id === period.id);
            const startIndex = periodIndex - existing.spanIndex;
            
            for (let i = 0; i < existing.spanCount; i++) {
              const relatedPeriod = dayPeriods[startIndex + i];
              if (relatedPeriod) {
                const relatedKey = `${editingCell.classId}-${relatedPeriod.id}`;
                delete newTimetable[relatedKey];
              }
            }
          }
        } else {
          delete newTimetable[key];
        }
      } else {
        const specialist = specialists.find(s => s.id === specialistId);
        if (specialist) {
          const periodsNeeded = Math.ceil(specialist.duration / 30);
          const period = timePeriods.find(p => p.id === editingCell.periodId);
          
          if (period) {
            const dayPeriods = timePeriods
              .filter(p => p.day === period.day)
              .sort((a, b) => a.start.localeCompare(b.start));
            
            const periodIndex = dayPeriods.findIndex(p => p.id === period.id);
            const consecutivePeriods = dayPeriods.slice(periodIndex, periodIndex + periodsNeeded);
            
            const allAvailable = consecutivePeriods.length === periodsNeeded && 
              consecutivePeriods.every((p, idx) => {
                if (idx === 0) return true;
                const prevPeriod = consecutivePeriods[idx - 1];
                const pKey = `${editingCell.classId}-${p.id}`;
                return prevPeriod.end === p.start && (!newTimetable[pKey] || pKey === key);
              });
            
            if (allAvailable) {
              consecutivePeriods.forEach((p, idx) => {
                const pKey = `${editingCell.classId}-${p.id}`;
                newTimetable[pKey] = {
                  specialistId,
                  isFirst: idx === 0,
                  spanCount: periodsNeeded,
                  spanIndex: idx
                };
              });
            } else {
              alert('Not enough consecutive time slots available for this lesson duration.');
              setEditingCell(null);
              return;
            }
          }
        }
      }
      
      setTimetable(newTimetable);
      setEditingCell(null);
    }
  };

  const generateTimetable = () => {
    setGenerating(true);
    
    setTimeout(() => {
      const newTimetable = {};
      
      const shuffleArray = (array) => {
        const arr = [...array];
        for (let i = arr.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [arr[i], arr[j]] = [arr[j], arr[i]];
        }
        return arr;
      };

      const getYearLevel = (className) => {
        const match = className.match(/^(Prep|Year \d+)/);
        return match ? match[1] : null;
      };

      const specialistSchedule = {};
      specialists.forEach(spec => {
        specialistSchedule[spec.id] = new Set();
      });

      // Build all possible time slots across the whole week for each specialist
      const buildAllSlots = (specialist, cls) => {
        const periodsNeeded = Math.ceil(specialist.duration / 30);
        const preferredSlots = [];
        const avoidSlots = [];
        
        days.forEach(day => {
          const dayPeriods = timePeriods
            .filter(p => p.day === day && !isBreakTime(p))
            .sort((a, b) => a.start.localeCompare(b.start));
          
          for (let i = 0; i <= dayPeriods.length - periodsNeeded; i++) {
            const consecutivePeriods = dayPeriods.slice(i, i + periodsNeeded);
            
            let isConsecutive = true;
            for (let j = 1; j < consecutivePeriods.length; j++) {
              if (consecutivePeriods[j - 1].end !== consecutivePeriods[j].start) {
                isConsecutive = false;
                break;
              }
            }
            
            if (!isConsecutive) continue;
            
            // Check if any period in this slot violates a hard constraint (avoid)
            const hasAvoidConstraint = consecutivePeriods.some(period => 
              isConstrainedTime(period, cls.name, 'avoid')
            );
            
            // Check if any period in this slot has a soft constraint (minimize)
            const hasMinimizeConstraint = consecutivePeriods.some(period => 
              isConstrainedTime(period, cls.name, 'minimize')
            );
            
            const slot = { day, periods: consecutivePeriods };
            
            if (!hasAvoidConstraint) {
              if (hasMinimizeConstraint) {
                avoidSlots.push(slot);
              } else {
                preferredSlots.push(slot);
              }
            }
          }
        });
        
        // Return preferred slots first, then avoid slots if needed
        return { preferredSlots, avoidSlots };
      };

      // Process each specialist
      specialists.forEach(specialist => {
        // Get eligible classes for this specialist
        const eligibleClasses = classes.filter(cls => {
          if (specialist.yearLevels.length === 0) return true;
          const classYearLevel = getYearLevel(cls.name);
          return classYearLevel && specialist.yearLevels.includes(classYearLevel);
        });

        // Randomize classes
        const shuffledClasses = shuffleArray(eligibleClasses);

        // Try to assign each class
        shuffledClasses.forEach(cls => {
          const { preferredSlots, avoidSlots } = buildAllSlots(specialist, cls);
          
          // Shuffle both sets of slots
          const shuffledPreferred = shuffleArray(preferredSlots);
          const shuffledAvoid = shuffleArray(avoidSlots);
          
          // Try preferred slots first
          let assigned = false;
          for (let slot of shuffledPreferred) {
            const allAvailable = slot.periods.every(period => {
              const key = `${cls.id}-${period.id}`;
              return !newTimetable[key] && !specialistSchedule[specialist.id].has(period.id);
            });
            
            if (allAvailable) {
              slot.periods.forEach((period, idx) => {
                const key = `${cls.id}-${period.id}`;
                newTimetable[key] = { 
                  specialistId: specialist.id,
                  isFirst: idx === 0,
                  spanCount: slot.periods.length,
                  spanIndex: idx
                };
                specialistSchedule[specialist.id].add(period.id);
              });
              assigned = true;
              break;
            }
          }
          
          // If no preferred slots available, try minimize slots
          if (!assigned) {
            for (let slot of shuffledAvoid) {
              const allAvailable = slot.periods.every(period => {
                const key = `${cls.id}-${period.id}`;
                return !newTimetable[key] && !specialistSchedule[specialist.id].has(period.id);
              });
              
              if (allAvailable) {
                slot.periods.forEach((period, idx) => {
                  const key = `${cls.id}-${period.id}`;
                  newTimetable[key] = { 
                    specialistId: specialist.id,
                    isFirst: idx === 0,
                    spanCount: slot.periods.length,
                    spanIndex: idx
                  };
                  specialistSchedule[specialist.id].add(period.id);
                });
                break;
              }
            }
          }
        });
      });

      setTimetable(newTimetable);
      setGenerating(false);
    }, 100);
  };

  const clearTimetable = () => {
    if (confirm('Are you sure you want to clear the entire timetable?')) {
      setTimetable({});
    }
  };

  const exportData = () => {
    const data = { specialists, classes, timePeriods, timetable, breaks, constraints };
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'specialist-timetable.json';
    a.click();
  };

  const exportToExcel = async () => {
    const XLSX = await import('https://cdn.sheetjs.com/xlsx-0.20.0/package/xlsx.mjs');
    
    const workbook = XLSX.utils.book_new();
    
    const periodsByDay = {};
    timePeriods.forEach(period => {
      if (!periodsByDay[period.day]) {
        periodsByDay[period.day] = [];
      }
      periodsByDay[period.day].push(period);
    });
    
    const sortedDays = days.filter(day => periodsByDay[day]);
    Object.keys(periodsByDay).forEach(day => {
      periodsByDay[day].sort((a, b) => a.start.localeCompare(b.start));
    });
    
    sortedDays.forEach(day => {
      const wsData = [];
      const headerRow = ['Class / Time'];
      periodsByDay[day].forEach(period => {
        headerRow.push(`${period.start}-${period.end}`);
      });
      wsData.push(headerRow);
      
      classes.forEach(cls => {
        const row = [cls.name];
        periodsByDay[day].forEach(period => {
          const key = `${cls.id}-${period.id}`;
          const entry = timetable[key];
          const specialist = entry ? specialists.find(s => s.id === entry.specialistId) : null;
          row.push(specialist ? specialist.name : '');
        });
        wsData.push(row);
      });
      
      const ws = XLSX.utils.aoa_to_sheet(wsData);
      XLSX.utils.book_append_sheet(workbook, ws, day);
    });
    
    const specialistViewData = [];
    const specialistHeaderRow = ['Specialist / Time'];
    sortedDays.forEach(day => {
      periodsByDay[day].forEach(period => {
        specialistHeaderRow.push(`${day} ${period.start}-${period.end}`);
      });
    });
    specialistViewData.push(specialistHeaderRow);
    
    specialists.forEach(specialist => {
      const row = [specialist.name];
      sortedDays.forEach(day => {
        periodsByDay[day].forEach(period => {
          const classWithSpecialist = classes.find(cls => {
            const key = `${cls.id}-${period.id}`;
            return timetable[key] && timetable[key].specialistId === specialist.id;
          });
          row.push(classWithSpecialist ? classWithSpecialist.name : '');
        });
      });
      specialistViewData.push(row);
    });
    
    const specialistWs = XLSX.utils.aoa_to_sheet(specialistViewData);
    XLSX.utils.book_append_sheet(workbook, specialistWs, 'Specialist View');
    
    const invertedViewData = [];
    const invertedHeaderRow = ['Day / Time'];
    specialists.forEach(spec => {
      invertedHeaderRow.push(spec.name);
    });
    invertedViewData.push(invertedHeaderRow);
    
    sortedDays.forEach(day => {
      periodsByDay[day].forEach(period => {
        const row = [`${day} ${period.start}-${period.end}`];
        specialists.forEach(specialist => {
          const classWithSpecialist = classes.find(cls => {
            const key = `${cls.id}-${period.id}`;
            return timetable[key] && timetable[key].specialistId === specialist.id;
          });
          row.push(classWithSpecialist ? classWithSpecialist.name : '');
        });
        invertedViewData.push(row);
      });
    });
    
    const invertedWs = XLSX.utils.aoa_to_sheet(invertedViewData);
    XLSX.utils.book_append_sheet(workbook, invertedWs, 'Specialist Inverted');
    
    classes.forEach(cls => {
      const classData = [];
      const classHeaderRow = ['Time'];
      sortedDays.forEach(day => {
        classHeaderRow.push(day);
      });
      classData.push(classHeaderRow);
      
      const uniqueTimes = timePeriods.filter((period, index, self) => 
        index === self.findIndex(p => p.start === period.start && p.end === period.end)
      );
      
      uniqueTimes.forEach(uniquePeriod => {
        const row = [`${uniquePeriod.start}-${uniquePeriod.end}`];
        sortedDays.forEach(day => {
          const dayPeriod = periodsByDay[day]?.find(
            p => p.start === uniquePeriod.start && p.end === uniquePeriod.end
          );
          const key = dayPeriod ? `${cls.id}-${dayPeriod.id}` : null;
          const entry = key ? timetable[key] : null;
          const specialist = entry ? specialists.find(s => s.id === entry.specialistId) : null;
          row.push(specialist ? specialist.name : '');
        });
        classData.push(row);
      });
      
      const classWs = XLSX.utils.aoa_to_sheet(classData);
      const sheetName = cls.name.substring(0, 31);
      XLSX.utils.book_append_sheet(workbook, classWs, sheetName);
    });
    
    specialists.forEach(spec => {
      const specData = [];
      const specHeaderRow = ['Time'];
      sortedDays.forEach(day => {
        specHeaderRow.push(day);
      });
      specData.push(specHeaderRow);
      
      const uniqueTimes = timePeriods.filter((period, index, self) => 
        index === self.findIndex(p => p.start === period.start && p.end === period.end)
      );
      
      uniqueTimes.forEach(uniquePeriod => {
        const row = [`${uniquePeriod.start}-${uniquePeriod.end}`];
        sortedDays.forEach(day => {
          const dayPeriod = periodsByDay[day]?.find(
            p => p.start === uniquePeriod.start && p.end === uniquePeriod.end
          );
          
          const classWithSpecialist = dayPeriod ? classes.find(cls => {
            const key = `${cls.id}-${dayPeriod.id}`;
            return timetable[key] && timetable[key].specialistId === spec.id;
          }) : null;
          
          row.push(classWithSpecialist ? classWithSpecialist.name : '');
        });
        specData.push(row);
      });
      
      const specWs = XLSX.utils.aoa_to_sheet(specData);
      const sheetName = `${spec.name} Schedule`.substring(0, 31);
      XLSX.utils.book_append_sheet(workbook, specWs, sheetName);
    });
    
    XLSX.writeFile(workbook, 'specialist-timetable.xlsx');
  };

  const importData = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        try {
          const data = JSON.parse(event.target.result);
          if (data.specialists) setSpecialists(data.specialists);
          if (data.classes) setClasses(data.classes);
          if (data.timePeriods) setTimePeriods(data.timePeriods);
          if (data.timetable) setTimetable(data.timetable);
          if (data.breaks) setBreaks(data.breaks);
          if (data.constraints) setConstraints(data.constraints);
        } catch (error) {
          alert('Error importing file');
        }
      };
      reader.readAsText(file);
    }
  };

  const periodsByDay = {};
  timePeriods.forEach(period => {
    if (!periodsByDay[period.day]) {
      periodsByDay[period.day] = [];
    }
    periodsByDay[period.day].push(period);
  });

  const sortedDays = days.filter(day => periodsByDay[day]);
  Object.keys(periodsByDay).forEach(day => {
    periodsByDay[day].sort((a, b) => a.start.localeCompare(b.start));
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-6 flex-wrap gap-4">
            <h1 className="text-3xl font-bold text-gray-800">Specialist Timetable Builder</h1>
            <div className="flex gap-2 flex-wrap">
              <button
                onClick={generateTimetable}
                disabled={generating}
                className="flex items-center gap-2 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition disabled:opacity-50"
              >
                <Wand2 size={18} /> {generating ? 'Generating...' : 'Auto Generate'}
              </button>
              <button
                onClick={clearTimetable}
                className="flex items-center gap-2 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
              >
                <RefreshCw size={18} /> Clear
              </button>
              <button
                onClick={exportToExcel}
                className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition"
              >
                <Download size={18} /> Export Excel
              </button>
              <button
                onClick={exportData}
                className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
              >
                <Save size={18} /> Save JSON
              </button>
              <label className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition cursor-pointer">
                <Upload size={18} /> Import
                <input type="file" accept=".json" onChange={importData} className="hidden" />
              </label>
            </div>
          </div>

          <div className="flex gap-2 mb-6">
            <button
              onClick={() => setView('timetable')}
              className={`px-6 py-2 rounded-lg font-medium transition ${
                view === 'timetable' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Timetable
            </button>
            <button
              onClick={() => setView('setup')}
              className={`px-6 py-2 rounded-lg font-medium transition ${
                view === 'setup' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Setup
            </button>
          </div>

          {view === 'setup' && (
            <div className="space-y-8">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <h3 className="font-semibold text-blue-900 mb-2">Quick Start Guide</h3>
                <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
                  <li>Add your specialist subjects (set duration and which year levels they teach)</li>
                  <li>Add all your classes</li>
                  <li>Adjust break times if needed (default: Recess 10:30-11:10, Lunch 1:10-1:50)</li>
                  <li>Optional: Add or modify year level constraints (defaults loaded for junior/senior year levels)</li>
                  <li>Adjust time periods if needed (default: 8:30-10:30, 11:10-1:10, 1:50-2:20)</li>
                  <li>Click "Auto Generate" - each class will get ONE session of each specialist per week!</li>
                </ol>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Specialists</h2>
                <div className="mb-4 space-y-3">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                    <input
                      type="text"
                      placeholder="Specialist name (e.g., Junior PE)"
                      value={newSpecialist.name}
                      onChange={(e) => setNewSpecialist({ ...newSpecialist, name: e.target.value })}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                    <input
                      type="number"
                      placeholder="Session duration (min)"
                      value={newSpecialist.duration}
                      onChange={(e) => setNewSpecialist({ ...newSpecialist, duration: parseInt(e.target.value) || 0 })}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    />
                    <div className="flex gap-1 p-1 border border-gray-300 rounded-lg bg-white">
                      {colors.map(color => (
                        <button
                          key={color}
                          type="button"
                          onClick={() => setNewSpecialist({ ...newSpecialist, color })}
                          className={`w-8 h-8 rounded transition ${
                            newSpecialist.color === color ? 'ring-2 ring-gray-800 ring-offset-1' : 'hover:scale-110'
                          }`}
                          style={{ backgroundColor: color }}
                          title="Select color"
                        />
                      ))}
                    </div>
                  </div>
                  <div className="border border-gray-300 rounded-lg p-3 bg-white">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Year Levels (leave all unchecked for all years)
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {availableYearLevels.map(yearLevel => (
                        <label key={yearLevel} className="flex items-center gap-2 px-3 py-1 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100">
                          <input
                            type="checkbox"
                            checked={newSpecialist.yearLevels.includes(yearLevel)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setNewSpecialist({
                                  ...newSpecialist,
                                  yearLevels: [...newSpecialist.yearLevels, yearLevel]
                                });
                              } else {
                                setNewSpecialist({
                                  ...newSpecialist,
                                  yearLevels: newSpecialist.yearLevels.filter(yl => yl !== yearLevel)
                                });
                              }
                            }}
                            className="w-4 h-4 text-indigo-500"
                          />
                          <span className="text-sm">{yearLevel}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                  <button
                    onClick={addSpecialist}
                    className="w-full px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition flex items-center justify-center gap-2"
                  >
                    <Plus size={20} /> Add Specialist
                  </button>
                </div>
                <div className="space-y-2">
                  {specialists.map(specialist => (
                    <div key={specialist.id} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                      <div
                        className="w-4 h-4 rounded flex-shrink-0"
                        style={{ backgroundColor: specialist.color }}
                      />
                      <span className="flex-1 font-medium">{specialist.name}</span>
                      <span className="text-gray-800 font-medium text-sm bg-white px-3 py-1 rounded">
                        {specialist.duration} min
                      </span>
                      <span className="text-gray-600 text-sm">
                        {specialist.yearLevels.length === 0 
                          ? 'All years' 
                          : specialist.yearLevels.join(', ')}
                      </span>
                      <button
                        onClick={() => deleteSpecialist(specialist.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Classes</h2>
                <div className="flex gap-2 mb-4">
                  <input
                    type="text"
                    placeholder="Class name (e.g., Year 1A)"
                    value={newClass}
                    onChange={(e) => setNewClass(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addClass()}
                    className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <button
                    onClick={addClass}
                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                  >
                    <Plus size={20} />
                  </button>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {classes.map(cls => (
                    <div key={cls.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <span className="font-medium">{cls.name}</span>
                      <button
                        onClick={() => deleteClass(cls.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Break Times</h2>
                <p className="text-sm text-gray-600 mb-4">
                  Add break times to block out these periods from specialist scheduling. Default breaks are Recess (10:30-11:10) and Lunch (1:10-1:50).
                </p>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-4">
                  <input
                    type="text"
                    placeholder="Break name (e.g., Lunch)"
                    value={newBreak.name}
                    onChange={(e) => setNewBreak({ ...newBreak, name: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <input
                    type="time"
                    value={newBreak.start}
                    onChange={(e) => setNewBreak({ ...newBreak, start: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <input
                    type="time"
                    value={newBreak.end}
                    onChange={(e) => setNewBreak({ ...newBreak, end: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <button
                    onClick={addBreak}
                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                  >
                    <Plus size={20} />
                  </button>
                </div>
                <div className="space-y-2">
                  {breaks.map(breakPeriod => (
                    <div key={breakPeriod.id} className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                      <span className="font-medium">{breakPeriod.name}</span>
                      <span className="text-gray-600">{breakPeriod.start} - {breakPeriod.end}</span>
                      <button
                        onClick={() => deleteBreak(breakPeriod.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Year Level Constraints</h2>
                <p className="text-sm text-gray-600 mb-4">
                  Add time constraints for specific year levels. "Avoid" will never schedule there, "Minimize" will try to avoid but may use if needed, "PLT" ensures all classes from that year level have a specialist lesson at the same time (for teacher meetings).
                </p>
                <div className="grid grid-cols-1 md:grid-cols-6 gap-2 mb-4">
                  <select
                    value={newConstraint.yearLevel}
                    onChange={(e) => setNewConstraint({ ...newConstraint, yearLevel: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    {availableYearLevels.map(year => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>
                  <select
                    value={newConstraint.type}
                    onChange={(e) => setNewConstraint({ ...newConstraint, type: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    <option value="avoid">Avoid</option>
                    <option value="minimize">Minimize</option>
                    <option value="plt">PLT (All classes)</option>
                  </select>
                  <select
                    value={newConstraint.day}
                    onChange={(e) => setNewConstraint({ ...newConstraint, day: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    <option value="all">All Days</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                  </select>
                  <input
                    type="time"
                    placeholder="Start time"
                    value={newConstraint.startTime}
                    onChange={(e) => setNewConstraint({ ...newConstraint, startTime: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <input
                    type="time"
                    placeholder="End time"
                    value={newConstraint.endTime}
                    onChange={(e) => setNewConstraint({ ...newConstraint, endTime: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <button
                    onClick={addConstraint}
                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                  >
                    <Plus size={20} />
                  </button>
                </div>
                <div className="space-y-2">
                  {constraints.map(constraint => (
                    <div key={constraint.id} className="flex items-center gap-2 p-3 bg-purple-50 rounded-lg border border-purple-200 flex-wrap">
                      <span className="font-medium">{constraint.yearLevel}</span>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        constraint.type === 'avoid' ? 'bg-red-100 text-red-800' : 
                        constraint.type === 'minimize' ? 'bg-orange-100 text-orange-800' :
                        'bg-green-100 text-green-800'
                      }`}>
                        {constraint.type === 'avoid' ? 'AVOID' : 
                         constraint.type === 'minimize' ? 'MINIMIZE' : 
                         'PLT'}
                      </span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium">
                        {constraint.day === 'all' ? 'All Days' : constraint.day}
                      </span>
                      <span className="text-gray-600 text-sm">{constraint.startTime} - {constraint.endTime}</span>
                      <button
                        onClick={() => deleteConstraint(constraint.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded ml-auto"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-xl font-semibold mb-4 text-gray-800">Time Periods</h2>
                <p className="text-sm text-gray-600 mb-4">
                  Default: 8:30-10:30am, Break, 11:10am-1:10pm, Break, 1:50-2:20pm. Add or remove as needed.
                </p>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-4">
                  <select
                    value={newPeriod.day}
                    onChange={(e) => setNewPeriod({ ...newPeriod, day: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  >
                    {days.map(day => (
                      <option key={day} value={day}>{day}</option>
                    ))}
                  </select>
                  <input
                    type="time"
                    value={newPeriod.start}
                    onChange={(e) => setNewPeriod({ ...newPeriod, start: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <input
                    type="time"
                    value={newPeriod.end}
                    onChange={(e) => setNewPeriod({ ...newPeriod, end: e.target.value })}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  <button
                    onClick={addPeriod}
                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition"
                  >
                    <Plus size={20} />
                  </button>
                </div>
                <div className="space-y-4">
                  {sortedDays.map(day => (
                    <div key={day}>
                      <h3 className="font-semibold text-gray-700 mb-2">{day}</h3>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                        {periodsByDay[day].map(period => (
                          <div key={period.id} className="flex items-center justify-between p-2 bg-gray-50 rounded text-sm">
                            <span className="font-medium">{period.start} - {period.end}</span>
                            <button
                              onClick={() => deletePeriod(period.id)}
                              className="p-1 text-red-500 hover:bg-red-50 rounded"
                            >
                              <Trash2 size={16} />
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {view === 'timetable' && (
            <div className="space-y-6">
              <div className="flex gap-2 mb-4 flex-wrap items-center">
                <button
                  onClick={() => setTimetableView('by-class')}
                  className={`px-6 py-2 rounded-lg font-medium transition ${
                    timetableView === 'by-class' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  View by Class
                </button>
                <button
                  onClick={() => setTimetableView('by-specialist')}
                  className={`px-6 py-2 rounded-lg font-medium transition ${
                    timetableView === 'by-specialist' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  View by Specialist
                </button>
                <button
                  onClick={() => {
                    setTimetableView('individual-class');
                    if (!selectedClassId && classes.length > 0) {
                      setSelectedClassId(classes[0].id);
                    }
                  }}
                  className={`px-6 py-2 rounded-lg font-medium transition ${
                    timetableView === 'individual-class' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  Individual Class
                </button>
                <button
                  onClick={() => {
                    setTimetableView('individual-specialist');
                    if (!selectedSpecialistId && specialists.length > 0) {
                      setSelectedSpecialistId(specialists[0].id);
                    }
                  }}
                  className={`px-6 py-2 rounded-lg font-medium transition ${
                    timetableView === 'individual-specialist' ? 'bg-indigo-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  Individual Specialist
                </button>
                
                {timetableView === 'by-specialist' && (
                  <div className="ml-auto flex gap-2">
                    <button
                      onClick={() => setSpecialistOrientation('horizontal')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition ${
                        specialistOrientation === 'horizontal' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      Horizontal
                    </button>
                    <button
                      onClick={() => setSpecialistOrientation('vertical')}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition ${
                        specialistOrientation === 'vertical' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      Vertical
                    </button>
                  </div>
                )}
              </div>

              {timetableView === 'by-class' && sortedDays.map(day => (
                <div key={day}>
                  <h2 className="text-2xl font-bold text-gray-800 mb-3">{day}</h2>
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr>
                          <th className="p-3 bg-indigo-500 text-white font-semibold border border-indigo-600 sticky left-0 z-10">
                            Class / Time
                          </th>
                          {periodsByDay[day].map(period => (
                            <th key={period.id} className="p-2 bg-indigo-500 text-white font-semibold border border-indigo-600 min-w-[100px] text-xs">
                              {period.start}<br/>{period.end}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {classes.map(cls => (
                          <tr key={cls.id}>
                            <td className="p-3 bg-gray-100 font-medium border border-gray-300 sticky left-0 z-10">
                              {cls.name}
                            </td>
                            {periodsByDay[day].map(period => {
                              const key = `${cls.id}-${period.id}`;
                              const entry = timetable[key];
                              const specialist = entry ? specialists.find(s => s.id === entry.specialistId) : null;
                              const isBreak = isBreakTime(period);
                              const isFirst = entry?.isFirst;
                              
                              return (
                                <td
                                  key={period.id}
                                  onClick={() => !isBreak && handleCellClick(cls.id, period.id)}
                                  className={`p-1 border border-gray-300 ${isBreak ? '' : 'cursor-pointer hover:bg-gray-50'} transition`}
                                  style={{
                                    backgroundColor: isBreak ? '#fef3c7' : (specialist ? specialist.color + '20' : 'white'),
                                  }}
                                >
                                  {isBreak ? (
                                    <div className="px-2 py-1 text-center text-xs font-medium text-yellow-800">
                                      {breaks.find(b => period.start >= b.start && period.start < b.end)?.name || 'Break'}
                                    </div>
                                  ) : specialist && isFirst ? (
                                    <div
                                      className="px-1 py-1 rounded text-white font-medium text-center text-xs shadow-sm"
                                      style={{ backgroundColor: specialist.color }}
                                    >
                                      <div className="whitespace-nowrap overflow-hidden text-ellipsis">{specialist.name}</div>
                                      <div className="text-[10px] opacity-90">{specialist.duration}min</div>
                                    </div>
                                  ) : specialist && !isFirst ? (
                                    <div
                                      className="h-full flex items-center justify-center text-white text-[10px] opacity-75"
                                      style={{ backgroundColor: specialist.color }}
                                    >
                                      •••
                                    </div>
                                  ) : null}
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              ))}

              {timetableView === 'by-specialist' && specialistOrientation === 'horizontal' && (
                <div>
                  <h2 className="text-2xl font-bold text-gray-800 mb-3">Specialist Schedule (Specialists as Rows)</h2>
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr>
                          <th className="p-3 bg-purple-500 text-white font-semibold border border-purple-600 sticky left-0 z-10">
                            Specialist
                          </th>
                          {sortedDays.map((day, dayIndex) => 
                            periodsByDay[day].map((period, periodIndex) => (
                              <th 
                                key={`${day}-${period.id}`} 
                                className={`p-2 bg-purple-500 text-white font-semibold border-purple-600 min-w-[90px] text-xs ${
                                  periodIndex === 0 ? 'border-l-4' : 'border-l'
                                } border-r border-t border-b`}
                              >
                                {day.substring(0, 3)}<br/>{period.start}<br/>{period.end}
                              </th>
                            ))
                          )}
                        </tr>
                      </thead>
                      <tbody>
                        {specialists.map(specialist => (
                          <tr key={specialist.id}>
                            <td className="p-3 font-medium border border-gray-300 sticky left-0 z-10" style={{ backgroundColor: specialist.color + '30' }}>
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded" style={{ backgroundColor: specialist.color }} />
                                {specialist.name}
                              </div>
                            </td>
                            {sortedDays.map((day, dayIndex) =>
                              periodsByDay[day].map((period, periodIndex) => {
                                const classWithSpecialist = classes.find(cls => {
                                  const key = `${cls.id}-${period.id}`;
                                  return timetable[key] && timetable[key].specialistId === specialist.id;
                                });
                                
                                const entry = classWithSpecialist ? timetable[`${classWithSpecialist.id}-${period.id}`] : null;
                                const isFirst = entry?.isFirst;
                                
                                return (
                                  <td
                                    key={`${day}-${period.id}`}
                                    onClick={() => classWithSpecialist && handleCellClick(classWithSpecialist.id, period.id)}
                                    className={`p-1 border-gray-300 cursor-pointer hover:bg-gray-50 transition text-center ${
                                      periodIndex === 0 ? 'border-l-4' : 'border-l'
                                    } border-r border-t border-b`}
                                    style={{ backgroundColor: classWithSpecialist ? specialist.color + '20' : 'white' }}
                                  >
                                    {classWithSpecialist && isFirst && (
                                      <div
                                        className="px-1 py-1 rounded text-white font-medium text-xs shadow-sm"
                                        style={{ backgroundColor: specialist.color }}
                                      >
                                        <div className="whitespace-nowrap overflow-hidden text-ellipsis">{classWithSpecialist.name}</div>
                                        <div className="text-[10px] opacity-90">{specialist.duration}min</div>
                                      </div>
                                    )}
                                    {classWithSpecialist && !isFirst && (
                                      <div
                                        className="h-full flex items-center justify-center text-white text-[10px] opacity-75 py-2"
                                        style={{ backgroundColor: specialist.color }}
                                      >
                                        •••
                                      </div>
                                    )}
                                  </td>
                                );
                              })
                            )}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}

              {timetableView === 'by-specialist' && specialistOrientation === 'vertical' && (
                <div>
                  <h2 className="text-2xl font-bold text-gray-800 mb-3">Specialist Schedule (Specialists as Columns)</h2>
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr>
                          <th className="p-3 bg-purple-500 text-white font-semibold border border-purple-600 sticky left-0 z-10">
                            Day / Time
                          </th>
                          {specialists.map(specialist => (
                            <th key={specialist.id} className="p-3 bg-purple-500 text-white font-semibold border border-purple-600 min-w-[120px]">
                              <div className="flex items-center justify-center gap-2">
                                <div className="w-3 h-3 rounded" style={{ backgroundColor: specialist.color }} />
                                {specialist.name}
                              </div>
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {sortedDays.map((day, dayIndex) =>
                          periodsByDay[day].map((period, periodIndex) => (
                            <tr key={`${day}-${period.id}`}>
                              <td className={`p-2 bg-gray-100 font-medium border-gray-300 sticky left-0 z-10 text-sm ${
                                periodIndex === 0 ? 'border-t-4' : 'border-t'
                              } border-l border-r border-b`}>
                                <div>{day.substring(0, 3)}</div>
                                <div className="text-xs text-gray-600">{period.start}-{period.end}</div>
                              </td>
                              {specialists.map(specialist => {
                                const classWithSpecialist = classes.find(cls => {
                                  const key = `${cls.id}-${period.id}`;
                                  return timetable[key] && timetable[key].specialistId === specialist.id;
                                });
                                
                                const entry = classWithSpecialist ? timetable[`${classWithSpecialist.id}-${period.id}`] : null;
                                const isFirst = entry?.isFirst;
                                
                                return (
                                  <td
                                    key={specialist.id}
                                    onClick={() => classWithSpecialist && handleCellClick(classWithSpecialist.id, period.id)}
                                    className={`p-1 border-gray-300 cursor-pointer hover:bg-gray-50 transition text-center ${
                                      periodIndex === 0 ? 'border-t-4' : 'border-t'
                                    } border-l border-r border-b`}
                                    style={{ backgroundColor: classWithSpecialist ? specialist.color + '20' : 'white' }}
                                  >
                                    {classWithSpecialist && isFirst && (
                                      <div
                                        className="px-1 py-1 rounded text-white font-medium text-xs shadow-sm"
                                        style={{ backgroundColor: specialist.color }}
                                      >
                                        <div className="whitespace-nowrap overflow-hidden text-ellipsis">{classWithSpecialist.name}</div>
                                        <div className="text-[10px] opacity-90">{specialist.duration}min</div>
                                      </div>
                                    )}
                                    {classWithSpecialist && !isFirst && (
                                      <div
                                        className="h-full flex items-center justify-center text-white text-[10px] opacity-75 py-2"
                                        style={{ backgroundColor: specialist.color }}
                                      >
                                        •••
                                      </div>
                                    )}
                                  </td>
                                );
                              })}
                            </tr>
                          ))
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}

              {timetableView === 'individual-class' && (
                <div>
                  <div className="mb-4 flex items-center gap-4">
                    <label className="font-semibold text-gray-700">Select Class:</label>
                    <select
                      value={selectedClassId || ''}
                      onChange={(e) => setSelectedClassId(parseInt(e.target.value))}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    >
                      {classes.map(cls => (
                        <option key={cls.id} value={cls.id}>{cls.name}</option>
                      ))}
                    </select>
                  </div>

                  {selectedClassId && (
                    <div>
                      <h2 className="text-2xl font-bold text-gray-800 mb-3">
                        {classes.find(c => c.id === selectedClassId)?.name} - Weekly Schedule
                      </h2>
                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse">
                          <thead>
                            <tr>
                              <th className="p-3 bg-indigo-500 text-white font-semibold border border-indigo-600">
                                Time
                              </th>
                              {sortedDays.map(day => (
                                <th key={day} className="p-3 bg-indigo-500 text-white font-semibold border border-indigo-600">
                                  {day}
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {timePeriods.filter((period, index, self) => 
                              index === self.findIndex(p => p.start === period.start && p.end === period.end)
                            ).map(uniquePeriod => (
                              <tr key={`${uniquePeriod.start}-${uniquePeriod.end}`}>
                                <td className="p-2 bg-gray-100 font-medium border border-gray-300 text-sm">
                                  {uniquePeriod.start} - {uniquePeriod.end}
                                </td>
                                {sortedDays.map(day => {
                                  const dayPeriod = periodsByDay[day]?.find(
                                    p => p.start === uniquePeriod.start && p.end === uniquePeriod.end
                                  );
                                  const key = dayPeriod ? `${selectedClassId}-${dayPeriod.id}` : null;
                                  const entry = key ? timetable[key] : null;
                                  const specialist = entry ? specialists.find(s => s.id === entry.specialistId) : null;
                                  const isFirst = entry?.isFirst;
                                  
                                  return (
                                    <td
                                      key={day}
                                      onClick={() => dayPeriod && handleCellClick(selectedClassId, dayPeriod.id)}
                                      className="p-1 border border-gray-300 cursor-pointer hover:bg-gray-50 transition text-center"
                                      style={{ backgroundColor: specialist ? specialist.color + '20' : 'white' }}
                                    >
                                      {specialist && isFirst && (
                                        <div
                                          className="px-2 py-2 rounded text-white font-medium text-sm shadow-sm"
                                          style={{ backgroundColor: specialist.color }}
                                        >
                                          <div className="whitespace-nowrap overflow-hidden text-ellipsis">{specialist.name}</div>
                                          <div className="text-xs opacity-90">{specialist.duration}min</div>
                                        </div>
                                      )}
                                      {specialist && !isFirst && (
                                        <div
                                          className="h-full flex items-center justify-center text-white text-xs opacity-75 py-2"
                                          style={{ backgroundColor: specialist.color }}
                                        >
                                          •••
                                        </div>
                                      )}
                                    </td>
                                  );
                                })}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {timetableView === 'individual-specialist' && (
                <div>
                  <div className="mb-4 flex items-center gap-4">
                    <label className="font-semibold text-gray-700">Select Specialist:</label>
                    <select
                      value={selectedSpecialistId || ''}
                      onChange={(e) => setSelectedSpecialistId(parseInt(e.target.value))}
                      className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    >
                      {specialists.map(spec => (
                        <option key={spec.id} value={spec.id}>{spec.name}</option>
                      ))}
                    </select>
                  </div>

                  {selectedSpecialistId && (
                    <div>
                      {(() => {
                        const specialist = specialists.find(s => s.id === selectedSpecialistId);
                        return (
                          <>
                            <h2 className="text-2xl font-bold text-gray-800 mb-3 flex items-center gap-2">
                              <div className="w-4 h-4 rounded" style={{ backgroundColor: specialist?.color }} />
                              {specialist?.name} - Weekly Schedule
                            </h2>
                            <div className="overflow-x-auto">
                              <table className="w-full border-collapse">
                                <thead>
                                  <tr>
                                    <th className="p-3 text-white font-semibold border border-purple-600" style={{ backgroundColor: specialist?.color }}>
                                      Time
                                    </th>
                                    {sortedDays.map(day => (
                                      <th key={day} className="p-3 text-white font-semibold border border-purple-600" style={{ backgroundColor: specialist?.color }}>
                                        {day}
                                      </th>
                                    ))}
                                  </tr>
                                </thead>
                                <tbody>
                                  {timePeriods.filter((period, index, self) => 
                                    index === self.findIndex(p => p.start === period.start && p.end === period.end)
                                  ).map(uniquePeriod => (
                                    <tr key={`${uniquePeriod.start}-${uniquePeriod.end}`}>
                                      <td className="p-2 bg-gray-100 font-medium border border-gray-300 text-sm">
                                        {uniquePeriod.start} - {uniquePeriod.end}
                                      </td>
                                      {sortedDays.map(day => {
                                        const dayPeriod = periodsByDay[day]?.find(
                                          p => p.start === uniquePeriod.start && p.end === uniquePeriod.end
                                        );
                                        
                                        const classWithSpecialist = dayPeriod ? classes.find(cls => {
                                          const key = `${cls.id}-${dayPeriod.id}`;
                                          return timetable[key] && timetable[key].specialistId === selectedSpecialistId;
                                        }) : null;
                                        
                                        const entry = classWithSpecialist && dayPeriod ? timetable[`${classWithSpecialist.id}-${dayPeriod.id}`] : null;
                                        const isFirst = entry?.isFirst;
                                        
                                        return (
                                          <td
                                            key={day}
                                            onClick={() => classWithSpecialist && dayPeriod && handleCellClick(classWithSpecialist.id, dayPeriod.id)}
                                            className="p-1 border border-gray-300 cursor-pointer hover:bg-gray-50 transition text-center"
                                            style={{ backgroundColor: classWithSpecialist ? specialist?.color + '20' : 'white' }}
                                          >
                                            {classWithSpecialist && isFirst && (
                                              <div
                                                className="px-2 py-2 rounded text-white font-medium text-sm shadow-sm"
                                                style={{ backgroundColor: specialist?.color }}
                                              >
                                                <div className="whitespace-nowrap overflow-hidden text-ellipsis">{classWithSpecialist.name}</div>
                                                <div className="text-xs opacity-90">{specialist?.duration}min</div>
                                              </div>
                                            )}
                                            {classWithSpecialist && !isFirst && (
                                              <div
                                                className="h-full flex items-center justify-center text-white text-xs opacity-75 py-2"
                                                style={{ backgroundColor: specialist?.color }}
                                              >
                                                •••
                                              </div>
                                            )}
                                          </td>
                                        );
                                      })}
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </>
                        );
                      })()}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {editingCell && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-xl font-semibold mb-4">
              Assign Specialist
            </h3>
            <div className="space-y-2 mb-4">
              {specialists.map(specialist => (
                <button
                  key={specialist.id}
                  onClick={() => assignSpecialist(specialist.id)}
                  className="w-full p-3 rounded-lg text-white font-medium hover:opacity-90 transition"
                  style={{ backgroundColor: specialist.color }}
                >
                  {specialist.name} ({specialist.duration} min)
                </button>
              ))}
              {editingCell.current && (
                <button
                  onClick={() => assignSpecialist(null)}
                  className="w-full p-3 rounded-lg bg-red-500 text-white font-medium hover:bg-red-600 transition"
                >
                  Remove
                </button>
              )}
            </div>
            <button
              onClick={() => setEditingCell(null)}
              className="w-full p-3 rounded-lg bg-gray-300 text-gray-700 font-medium hover:bg-gray-400 transition"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default SpecialistTimetable;